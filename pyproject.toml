[tool.poetry]
name = "mlit-manager"
version = "0.1.0"
description = ""
authors = ["kashi-x <kashimiya.exe@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "src" }]

[tool.poetry.dependencies]
python = "^3.12"
python-dotenv = "^1.0.1"
rich = "^13.9.4"
structlog = "^24.4.0"
fire = "^0.7.0"
httpx = "^0.27.2"
beautifulsoup4 = "^4.12.3"

[tool.poetry.group.test.dependencies]
coverage = "^7.6.7"
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
pytest-datadir = "^1.5.0"

[tool.poetry.group.dev.dependencies]
better-exceptions = "^0.3.3"
ruff = "^0.7.4"
mypy = "^1.13.0"
pyright = "^1.1.389"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.12"
plugins = [
	"returns.contrib.mypy.returns_plugin",
	"numpy.typing.mypy_plugin",
	"pandera.mypy",
	"pydantic.mypy",
]
exclude = ['data']
namespace_packages = true
strict = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_unimported = true
warn_unreachable = true
allow_redefinition = true

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
xfail_strict = true
addopts = [
	"-v",
	"--strict-config",
	"--strict-markers",
	"--picked",
	"--cov=src",
	"--no-cov-on-fail",
]
asyncio_mode = "auto"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
omit = ["tests/*"]
parallel = true
source = ["src"]

[tool.coverage.report]
show_missing = true
fail_under = 100
skip_covered = true
skip_empty = true

[tool.pyright]
pythonVersion = "3.12"
include = ["src"]
exclude = [
	"**/node_modules",
	"**/__pycache__",
	"**/typestubs",
	"**/stubs",
	"**/.pyenv",
	"build",
	"dist",
]
stubPath = "src/stubs"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
ignore = ["src/old*", ".venv/*"]
basic = ["**"]

[tool.ruff]
target-version = "py312"
line-length = 120
fix = true
unsafe-fixes = true
respect-gitignore = true
src = ["src", "test"]
indent-width = 4

[tool.ruff.lint]
extend-ignore = [
	"D10",     # undocumented code  WHYNOT: for small project.
	"PLR2004", # WHYNOT: for fast dev
	"PLR0917", # Too many positional arguments ({c_pos}/{max_pos})  WHYNOT: PLR0913 is better.
	"PLR6301", # Checks for the presence of unused self parameter in methods definitions.  WHYNOT: false-positive
	"T20",     # flake8-print  WHYNOT: for fast debug.
	"TD",      # flake8-todos
	"FIX",     # flake8-fixme
	"TRY002",  # WHYNOT: for small project.
	"TRY003",  # Avoid specifying long messages outside the exception class.  WHYNOT: for fast debug.
	# "COM812",  # Derived from the flake8-commas linter. WHYNOT: Not in compliance with Fixer.
	"TCH", # flake8-type-checking  WHYNOT: for fast dev.
	# "ANN10",  # Missing type annotation for self.  WHYNOT: unproductive type puzzle.(suppressed by ignore-fully-untyped = true)
	# "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in {name}.  WHYNOT: false-positive. (suppressed by ignore-fully-untyped = true)
]
unfixable = [
	"RET504", # unnecessary-assign
	"F401",   # unused-import (ignore-init-module-imports = true)
	"F841",   # unused-variable  WHYNOT: for debug
	"TCH002", # typing-only-third-party-import  WHYNOT: for fast dev.
	# "B",      # flake8-bugbear  WHYNOT: buggy.
]
logger-objects = ["logging_setup.logger"]
select = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "INP001"]
"tests/*" = [
	"ARG",     # flake8-unused-arguments
	"FBT",     # flake8-boolean-trap
	"S",       # flake8-bandit
	"E402",    # Module level import not at top of cell
	"E501",    # Line too long ({width} > {limit})
	"INP001",  # File {filename} is part of an implicit namespace package. Add an __init__.py.
	"PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
	"D10",     # Missing docstring
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"                   # "google" | "numpy" | "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-line-length = 120
max-doc-length = 150

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]
quote-annotations = true

[tool.ruff.lint.flake8-errmsg]
max-string-length = 20

[tool.ruff.lint.mccabe]
max-complexity = 3 # default is 10

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
allow-star-arg-any = false
suppress-dummy-args = false
suppress-none-returning = false

[tool.codespell]
skip = '*.po,*.ts,./src/3rdParty, /trial'
count = ''
quiet-level = 3
